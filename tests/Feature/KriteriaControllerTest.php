<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Database\Seeders\KriteriaSeeder;
use Illuminate\Support\Facades\DB;
use App\Models\Kriteria;
use App\Models\User;
use Tests\TestCase;

class KriteriaControllerTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        
        // Nonaktifkan constraint
        DB::statement('SET FOREIGN_KEY_CHECKS=0;');

        // Lakukan truncate atau delete
        Kriteria::truncate();

        // Aktifkan constraint kembali
        DB::statement('SET FOREIGN_KEY_CHECKS=1;');

        $user = User::find(1);

        $this->actingAs($user); 
    }

    public function testIndex()
    {

        // Mengunjungi route yang sesuai untuk menampilkan indeks kriteria
        $response = $this->get('/managekriteria');

        // Memastikan respons adalah 200 (OK)
        $response->assertStatus(200);

        // Memastikan bahwa tampilan (view) yang tepat digunakan
        $response->assertViewIs('managekriteria.index');
    }

    public function testCreate()
    {
        $this->seed([KriteriaSeeder::class]);

        // Mengunjungi route yang sesuai untuk menampilkan indeks kriteria
        $response = $this->get('/managekriteria/create');

        // Memastikan respons adalah 200 (OK)
        $response->assertStatus(200);

        // Memastikan bahwa tampilan (view) yang tepat digunakan
        $response->assertViewIs('managekriteria.create');
    }

    public function testStoreSuccess()
    {
        $this->seed([KriteriaSeeder::class]);

        // Menyiapkan data untuk pengujian
        $data = [
            'nama_kriteria' => 'Kriteria Baru',
        ];

        // Mengirim permintaan POST untuk menyimpan data
        $response = $this->post('/managekriteria', $data);

        // Memastikan bahwa data berhasil ditambahkan
        $response->assertStatus(302);

        $response->assertRedirect('managekriteria');

        $this->assertDatabaseHas('kriteria', [
            'nama_kriteria' => 'Kriteria Baru',
        ]);

    }

    public function testStoreFailed()
    {
        $this->seed([KriteriaSeeder::class]);

        // Menyiapkan data untuk pengujian
        $data = [
            'nama_kriteria' => 'IP', // sudah ada
        ];

        // Mengirim permintaan POST untuk menyimpan data
        $response = $this->post('/managekriteria', $data);

        // Memastikan bahwa data gagal ditambahkan dan respons memiliki status kode 302
        $response->assertStatus(302);

    }

    public function testUpdateSuccess()
    {
        $this->seed([KriteriaSeeder::class]);

        // Menyiapkan data untuk pengujian
        $data = [
            'nama_kriteria' => 'Nama Diperbarui',
        ];

        // Mengirim permintaan PATCH untuk memperbarui data
        $response = $this->patch('/managekriteria/1', $data); // Ganti nama_kriteria pada id 1

        // Memastikan bahwa perubahan berhasil dan pengalihan berfungsi
        $response->assertRedirect('/managekriteria');

        // Anda juga dapat memeriksa data yang diperbarui di basis data jika perlu
        $this->assertDatabaseHas('kriteria', ['nama_kriteria' => 'Nama Diperbarui']);
    }

    public function testUpdateFailed()
    {
        $this->seed([KriteriaSeeder::class]);
        
        // Menyiapkan data untuk pengujian
        $data = [
            'nama_kriteria' => '', //kosong
        ];

        // Mengirim permintaan PATCH untuk memperbarui data
        $response = $this->patch('/managekriteria/1', $data); // Ganti nama_kriteria pada id 1

        // Memastikan bahwa data gagal diubah dan respons memiliki status kode 302
        $response->assertStatus(302);
        
    }

    public function testUpdateFailed2()
    {
        $this->seed([KriteriaSeeder::class]);
        
        // Menyiapkan data untuk pengujian
        $data = [
            'nama_kriteria' => 'prestasi', //duplikat
        ];

        // Mengirim permintaan PATCH untuk memperbarui data
        $response = $this->patch('/managekriteria/1', $data); // Ganti nama_kriteria pada id 1

        // Memastikan bahwa data gagal diubah dan respons memiliki status kode 302
        $response->assertStatus(302);
        
    }
}
